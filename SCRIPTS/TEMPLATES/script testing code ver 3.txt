/**** PASTE INTO "SCRIPT INITIALIZER" WINDOW ****/
// logDebug will now work in this tester, no need for aa.print
function LetsDoThisThing()
{/////////////////////////
//---------start----------


//---------end------------
}/////////////////////////


/**** PASTE INTO "SCRIPT TEXT" WINDOW ****/

var myCapId = "LICA16-00294";  
//var myCapId = "0216RENEW-0000013";
//var childCap = "TLTAX1-SN-000041L";
var myUserId = "ADMIN";
//var showDebug = true;
//var debug = true;
//var br = "<br>";
var wfTask = "Issue License";
var wfStatus = "Issued";

/* ASA  */  var eventName = "ApplicationSubmitAfter";
/* ASB  */  //var eventName = "ApplicationSubmitBefore";
/* ASUA */ //var eventName = "ApplicationStatusUpdateAfter"; 
/* WTUA */  //var eventName = "WorkflowTaskUpdateAfter";  wfTask = "Closured"; wfStatus = "Reinstated";  wfDateMMDDYYYY = "01/15/2016";
/* IRSA */   //var eventName = "InspectionResultSubmitAfter" ; inspResult = "Failed"; inspResultComment = "Comment";  inspType = "Roofing"
/* ISA  */  //var eventName = "InspectionScheduleAfter" ; inspType = "Roofing"
/* PRA  */  //var eventName = "PaymentReceiveAfter";  
/* CTRCA*/    //var eventName = "ConvertToRealCapAfter";  
/* ASIUA*/  //var eventName = "ApplicationSpecificInfoUpdateAfter";  
/* FAB  */    //var eventName = "FeeAssessBefore"; var FeeItemsList= "[APPFEE|PERROOM]";

var useProductScript = true;  // set to true to use the "productized" master scripts (events->master scripts), false to use scripts from (events->scripts)
var runEvent = false; // set to true to simulate the event and run all std choices/scripts for the record type.  

/* master script code don't touch */ 
aa.env.setValue("EventName",eventName); 
var vEventName = eventName;  
var controlString = eventName;  
var tmpID = aa.cap.getCapID(myCapId).getOutput(); 
if(tmpID != null)
{
  aa.env.setValue("PermitId1",tmpID.getID1());
  aa.env.setValue("PermitId2",tmpID.getID2());
  aa.env.setValue("PermitId3",tmpID.getID3());
}
aa.env.setValue("CurrentUserID",myUserId); 
var preExecute = "PreExecuteForAfterEvents";
var documentOnly = false;
var SCRIPT_VERSION = 3.0;
var useSA = false;
var SA = null;
var SAScript = null;
var bzr = aa.bizDomain.getBizDomainByValue("MULTI_SERVICE_SETTINGS","SUPER_AGENCY_FOR_EMSE"); 
if (bzr.getSuccess() && bzr.getOutput().getAuditStatus() != "I") 
{
  useSA = true;
  SA = bzr.getOutput().getDescription();
  bzr = aa.bizDomain.getBizDomainByValue("MULTI_SERVICE_SETTINGS","SUPER_AGENCY_INCLUDE_SCRIPT");
  if (bzr.getSuccess()) 
  { 
    SAScript = bzr.getOutput().getDescription(); 
  }
}
if (SA) 
{
  eval(getScriptText("INCLUDES_ACCELA_FUNCTIONS",SA,useProductScript));
  eval(getScriptText("INCLUDES_ACCELA_GLOBALS",SA,useProductScript));  
  /* force for script test*/ 
  showDebug = true; 
  eval(getScriptText(SAScript,SA,useProductScript)); 
}
else 
{
  eval(getScriptText("INCLUDES_ACCELA_FUNCTIONS",null,useProductScript));
  eval(getScriptText("INCLUDES_ACCELA_GLOBALS",null,useProductScript));
}
eval(getScriptText("INCLUDES_CUSTOM",null,useProductScript));
if (documentOnly) 
{
  doStandardChoiceActions2(controlString,false,0);
  aa.env.setValue("ScriptReturnCode", "0");
  aa.env.setValue("ScriptReturnMessage", "Documentation Successful.  No actions executed.");
  aa.abortScript();
}
var prefix = lookup("EMSE_VARIABLE_BRANCH_PREFIX",vEventName);
var controlFlagStdChoice = "EMSE_EXECUTE_OPTIONS";
var doStdChoices = true;
var doScripts = false;
var bzr = aa.bizDomain.getBizDomain(controlFlagStdChoice ).getOutput().size() > 0;
if (bzr) 
{
  var bvr1 = aa.bizDomain.getBizDomainByValue(controlFlagStdChoice ,"STD_CHOICE");
  doStdChoices = bvr1.getSuccess() && bvr1.getOutput().getAuditStatus() != "I";
  var bvr1 = aa.bizDomain.getBizDomainByValue(controlFlagStdChoice ,"SCRIPT");
  doScripts = bvr1.getSuccess() && bvr1.getOutput().getAuditStatus() != "I"; 
}
function getScriptText(vScriptName, servProvCode, useProductScripts) 
{ 
  if (!servProvCode) servProvCode = aa.getServiceProviderCode();
  vScriptName = vScriptName.toUpperCase();
  var emseBiz = aa.proxyInvoker.newInstance("com.accela.aa.emse.emse.EMSEBusiness").getOutput();
  try
  {
    if (useProductScripts) 
    {
      var emseScript = emseBiz.getMasterScript(aa.getServiceProviderCode(), vScriptName);
    }
    else
    {
      var emseScript = emseBiz.getScriptByPK(aa.getServiceProviderCode(), vScriptName, "ADMIN");
    }

    return emseScript.getScriptText() + "";
  }
  catch (err) 
  {
    return "";
  }
}
logGlobals(AInfo);
if (runEvent && typeof(doStandardChoiceActions) == "function" && doStdChoices) 
try 
{
  doStandardChoiceActions(controlString,true,0);
}
catch (err) 
{
  logDebug(err.message)
}
if (runEvent && typeof(doScriptActions) == "function" && doScripts) doScriptActions(); 
var z = debug.replace(/<BR>/g,"\r");
aa.print(z); 

eval("function logDebug(dstr){mkyOutput += '\\r' + dstr + '\\r';}"); // override logDebug()

function exploreObject(objExplore) 
{
    aa.print("Class Name: " + objExplore.getClass());
    aa.print("Methods:");
    for (var x in objExplore) {
        if (typeof(objExplore[x]) == "function")
        aa.print("   " + x);
    }

    aa.print("");
    aa.print("Properties:");
    for (var y in objExplore) {
        if (typeof(objExplore[y]) != "function")
        aa.print("   " + y + " = " + objExplore[y]);
    }
}

function LogEnvVariables() 
{
    //Log All Environmental Variables as  globals
    aa.print("START Available Environmental Variables");
    aa.print("---------------------------------");
    var params = aa.env.getParamValues();
    var keys =  params.keys();
    var key = null;
    while(keys.hasMoreElements())
    {
        key = keys.nextElement();
        eval("var " + key + " = aa.env.getValue(\"" + key + "\");");
        aa.print("Loaded Env Variable: " + key + " = " + aa.env.getValue(key));
    }

    aa.print("---------------------------------");
    aa.print("END Available Environmental Variables");

}
LogEnvVariables();

//=======================================================
//User code goes here
//=======================================================

showDebug=true;
var mkyOutput = "\r-- MONKEY -- \r";


mkyOutput += "put stuff here \r";

LetsDoThisThing();


aa.print(mkyOutput); 

//=======================================================
// END HERE
//aa.print(aa.document);
//end user code
//=======================================================
//aa.env.setValue("ScriptReturnCode", "1");
//aa.env.setValue("ScriptReturnMessage", debug);